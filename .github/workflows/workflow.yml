name: Workflow

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["*"]

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.short_sha_setup.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v3
      - name: Save short sha
        shell: bash
        id: short_sha_setup
        run: |
          SHA=$(git rev-parse --short=20 ${{ github.sha }})
          echo "short_sha=$SHA" >> "$GITHUB_OUTPUT"


  build:
    name: Build and run all tests and checks
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: "3.10.8"

      - uses: Gr1N/setup-poetry@v8
        name: Install poetry
        with:
          poetry-version: 1.2.2

      - name: Install python dependencies
        run: make setup

      - name: Check types
        run: make lint

      - name: Check formatting
        run: make format

      - name: Run test
        run: make test

      - name: Build udfs
        run: make udfs

      - name: Upload udf artifacts for upload later
        uses: actions/upload-artifact@v2
        with:
          name: udfs
          path: ./dist
          retention-days: 1

  upload:
    name: Upload UDFs to s3
    timeout-minutes: 30
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [build, setup]

    steps:
      - uses: actions/checkout@v3

      - name: Download udf artifacts
        uses: actions/download-artifact@v2
        with:
          name: udfs
          path: ./dist

      - uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: whylabs-snowflake-udfs
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          SOURCE_DIR: "dist"
          DEST_DIR: "udfs/v1/latest"

      - uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: whylabs-snowflake-udfs
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          SOURCE_DIR: "dist"
          DEST_DIR: "udfs/v1/archive/${{ needs.setup.outputs.short_sha}}"

  release:
    name: Create a release
    if: ${{ github.event_name == 'push' }}
    needs: [build, setup, upload]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.short_sha}}
          release_name: Release ${{ needs.setup.outputs.short_sha}}
          draft: false
          prerelease: false
          body: |
            Latest UDF s3 paths
              - `s3://whylabs-snowflake-udfs/udfs/v1/latest/whylogs_udf.py`
              - `s3://whylabs-snowflake-udfs/udfs/v1/latest/whylabs_upload_udf.py`

            Version tagged UDF s3 paths
              - `s3://whylabs-snowflake-udfs/udfs/v1/archive/${{ needs.setup.outputs.short_sha }}/whylogs_udf.py`
              - `s3://whylabs-snowflake-udfs/udfs/v1/archive/${{ needs.setup.outputs.short_sha }}/whylabs_upload_udf.py`

            Create the latest functions in Snowflake like so. Make sure to see the [official doc page](https://docs.whylabs.ai/docs/integrations-snowflake)
            for all of the instructions. This snippet doesn't cover creating the function integrations, network rules and secrets.

            ```sql
            CREATE OR REPLACE STORAGE INTEGRATION whylabs_s3_integration
              TYPE = EXTERNAL_STAGE
              STORAGE_PROVIDER = 'S3'
              ENABLED = TRUE
              STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::207285235248:role/public-snowflake-role'
              STORAGE_ALLOWED_LOCATIONS = ('s3://whylabs-snowflake-udfs/udfs/')
            ;

            CREATE OR REPLACE STAGE whylabs_udf_stage
              STORAGE_INTEGRATION = whylabs_s3_integration
              URL = 's3://whylabs-snowflake-udfs/udfs/'
            ;

            CREATE OR REPLACE FUNCTION whylogs(data object)
                RETURNS TABLE (
                    profile_view varchar,
                    dataset_timestamp int,
                    segment_partition varchar,
                    segment varchar,
                    rows_processed int,
                    debug_info varchar
                )
                LANGUAGE python
                RUNTIME_VERSION = '3.10'
                EXTERNAL_ACCESS_INTEGRATIONS = (whylabs_integration)
                SECRETS = ('data_grouper_freq' = data_grouper_freq, 'segment_columns' = segment_columns)
                PACKAGES = ('snowflake-snowpark-python', 'whylogs', 'pandas')
                HANDLER = 'whylogs_udf.handler'
                IMPORTS = ('@whylabs_udf_stage/v1/latest/whylogs_udf.py')
            ;

            CREATE OR REPLACE FUNCTION whylabs_upload(profile_view varchar, segment_partition varchar, segment varchar)
                RETURNS TABLE (upload_result varchar)
                LANGUAGE python
                RUNTIME_VERSION = '3.10'
                EXTERNAL_ACCESS_INTEGRATIONS = (whylabs_upload_integration)
                SECRETS = ('whylabs_api_key' = whylabs_api_key, 'whylabs_org_id' = whylabs_org_id, 'whylabs_dataset_id' = whylabs_dataset_id)
                PACKAGES = ('snowflake-snowpark-python', 'requests', 'whylogs', 'whylabs-client')
                HANDLER = 'whylabs_upload_udf.handler'
                IMPORTS = ('@whylabs_udf_stage/v1/latest/whylabs_upload_udf.py')
            ;
            ````

      - name: Download udf artifacts
        uses: actions/download-artifact@v2
        with:
          name: udfs
          path: ./dist

      - name: Zip up the dist folder
        run: zip -r udfs.zip dist

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./udfs.zip
          asset_name: udfs.zip
          asset_content_type: application/zip